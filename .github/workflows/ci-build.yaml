name: 🛠️ 🐳 Build

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'

jobs:
  jar-build-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
        cache-dependency-path: |
          **/*.gradle*
          gradle/**/gradle-wrapper.properties

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Generate runtime classpath dependencies file
      run: ./gradlew dependencies --configuration runtimeClasspath > deps.txt

    - name: Check for changes in deps.txt
      id: check_changes
      run: git diff --quiet deps.txt || echo "deps.txt has changed"

    - name: Configure git
      if: steps.check_changes.outputs.result == 'deps.txt has changed'
      run: |
        git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
        git config --global user.name "GitHub Actions Bot"
        
    - name: Auto-commit deps.txt
      if: steps.check_changes.outputs.result == 'deps.txt has changed'
      env:
        GIT_COMMITTER_NAME: ${{ github.actor }}
        GIT_COMMITTER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
      run: |
        git add deps.txt
        git commit -m "Auto-update deps.txt"
        git push origin ${{ github.ref_name }}
        
    - name: Build with Gradle
      run: ./gradlew -i clean assemble compileTestJava --no-daemon

    - name: Run unit tests
      run: ./gradlew -i test --continue
      
    # - name: Run Integration Tests
    #   run: ./gradlew integrationTest

    - name: Run Checkstyle
      run: ./gradlew checkstyleMain --continue
  
    - name: Upload Checkstyle Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: checkstyle-report
        path: '**/build/reports/checkstyle/main.xml'

    - name: Upload JAR file
      uses: actions/upload-artifact@v3
      with:
        name: built-jar
        path: build/libs/demo-0.0.1-SNAPSHOT.jar

  docker-build-push:
    runs-on: ubuntu-latest
    needs: jar-build-test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract short SHA
      id: vars
      run: echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_ENV
  
    - name: Extract repository name
      id: repo_name
      run: echo "repository=$(echo ${{ github.repository }} | cut -d'/' -f2)" >> $GITHUB_ENV

    - name: Download JAR file
      uses: actions/download-artifact@v3
      with:
        name: built-jar

    - name: Build with Docker and push 
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        file: ./Dockerfile
        build-args: |
          JAR_FILE=demo-0.0.1-SNAPSHOT.jar  
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.repository }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.repository }}:${{ env.short_sha }}

    - name: Image digest
      run: echo ${{ steps.build-push.outputs.digest }}

  # notify:
  #   runs-on: ubuntu-latest
  #   needs: [unit-test, build-docker]
  #   steps:
  #   - name: Notify Team
  #     run: |
  #       curl -X POST -H 'Content-type: application/json' --data '{"text":"Build and deployment completed successfully."}' ${{ secrets.SLACK_WEBHOOK_URL }}
