name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Save build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          ./**/build/libs/*.jar
          ./gradlew
          ./gradlew.bat
          ./gradle/wrapper/gradle-wrapper.jar
          ./gradle/wrapper/gradle-wrapper.properties

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: .
    - name: Run unit tests
      run: ./gradlew test
      
    # - name: Run Integration Tests
    #   run: ./gradlew integrationTest

    - name: Static Code Analysis
      run: ./gradlew check
  
  build-docker:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract short SHA
      id: vars
      run: echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_ENV
  
    - name: Extract repository name
      id: repo_name
      run: echo "repository=$(echo ${{ github.repository }} | cut -d'/' -f2)" >> $GITHUB_ENV
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.repository }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.repository }}:${{ env.short_sha }}

    - name: Image digest
      run: echo ${{ steps.build-push.outputs.digest }}

  # notify:
  #   runs-on: ubuntu-latest
  #   needs: [unit-test, build-docker]
  #   steps:
  #   - name: Notify Team
  #     run: |
  #       curl -X POST -H 'Content-type: application/json' --data '{"text":"Build and deployment completed successfully."}' ${{ secrets.SLACK_WEBHOOK_URL }}
    